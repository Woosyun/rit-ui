use rit::commands::*;

fn main() {
    let args: Vec<String> = std::env::args().collect();
    if args.len() < 2 {
        println!("command is missing");
    }

    let cwd = std::env::current_dir()
        .expect("cannot get current directory");
    match args[1].as_str() {
        "commit" => {
            let command = Commit::build(cwd).expect("cannot start commit");

            if args.len() != 3 {
                println!("commit message is missing");
                return;
            }

            let message = args[2].clone();
            match command.execute(message) {
                Ok(_) => println!("commit successed"),
                Err(e) => eprintln!("error: {:#?}", e),
            };
        },
        "init" => {
            let cmd = Init::build(cwd).expect("canoot start init");
            match cmd.execute() {
                Ok(_) => println!("init successed"),
                Err(e) => eprintln!("error: {:#?}", e),
            };
        },
        "status" => {
            let status = Status::build(cwd).expect("status failed");
            status.execute().expect("failed to run status command");
        },
        "log" => {
            let mut log = Log::build(cwd).expect("log failed");
            log.execute("main").expect("failed to run log command");
            //log.print();
        },
        _ => {
            eprintln!("Unsupported command");
        }
    }
}
